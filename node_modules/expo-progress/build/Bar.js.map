{"version":3,"file":"Bar.js","sourceRoot":"","sources":["../src/Bar.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ImageBackground,\n  ImageURISource,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n  ImageBackgroundProps,\n} from 'react-native';\nimport Animated, {\n  // @ts-ignore: always isn't defined in the types\n  always,\n  block,\n  Extrapolate,\n  interpolate,\n  multiply,\n  Node,\n  set,\n} from 'react-native-reanimated';\nimport { clamp, loop, timing, useValue } from 'react-native-redash';\n\nexport type ProgressBarProps = {\n  /**\n   * If the progress bar will show indeterminate progress by looping an animation infinitely.\n   *\n   * @default false\n   */\n  isIndeterminate?: boolean;\n\n  /**\n   * Duration to animate changes in milliseconds.\n   *\n   * @default isIndeterminate ? 1000 : 500\n   */\n  duration?: number;\n\n  /**\n   * If the bar should animate between values.\n   *\n   * @default false\n   */\n  isAnimated?: boolean;\n\n  /**\n   * The progress value (between 0 and 1).\n   *\n   * @default 0\n   */\n  progress?: number;\n\n  /**\n   * The tint color of the progress bar itself.\n   *\n   * @default #007aff\n   */\n  color?: string;\n\n  /**\n   * The tint color of the progress bar track.\n   *\n   * @default transparent\n   */\n  trackColor?: string;\n\n  /**\n   * A stretchable image to display as the progress bar.\n   */\n  progressImage?: ImageURISource | ImageURISource[];\n\n  /**\n   * A stretchable image to display behind the progress bar.\n   */\n  trackImage?: ImageURISource | ImageURISource[];\n\n  /**\n   * Height of the loading indicator.\n   *\n   * @default 7\n   */\n  height?: number;\n\n  /**\n   * Border radius of the loading indicator.\n   *\n   * @default height / 2\n   */\n  borderRadius?: number;\n\n  /**\n   * Style for the loading indicator container view.\n   */\n  style?: ImageBackgroundProps['style'];\n};\n\nconst minProgress = 0;\nconst maxProgress = 1;\n\nfunction useCode(nodeFactory, dependencies) {\n  if (!(React.useEffect instanceof Function)) return;\n\n  // @ts-ignore\n  React.useEffect(() => {\n    // check and correct 1st parameter\n    if (!(nodeFactory instanceof Function)) {\n      console.warn(\n        'useCode() first argument should be a function that returns an animation node.'\n      );\n\n      const node = nodeFactory;\n      nodeFactory = () => node;\n    }\n\n    let node = nodeFactory();\n    if (node) {\n      // allow factory to return array\n      if (node instanceof Array) node = block(node);\n\n      const animatedAlways = always(node);\n      animatedAlways.__attach();\n      // todo: upstream this\n      if (Platform.OS === 'web') {\n        animatedAlways.__onEvaluate();\n      }\n\n      // return undo function\n      return () => animatedAlways.__detach();\n    }\n  }, dependencies);\n}\n\nfunction ProgressBar({\n  isIndeterminate = false,\n  duration = isIndeterminate ? 1000 : 500,\n  isAnimated = false,\n  progress = isIndeterminate ? 0.5 : 0,\n  height = 7,\n  borderRadius = height * 0.5,\n  // Default iOS blue\n  color = '#007aff',\n  trackColor = 'transparent',\n  style,\n  trackImage,\n  progressImage,\n}: ProgressBarProps) {\n  const [width, setWidth] = React.useState(0);\n  const progressValue = useValue(isAnimated ? 0 : progress);\n  const indeterminateValue = useValue(0);\n  const animatedWidth = interpolate(\n    clamp(progressValue, minProgress, maxProgress),\n    {\n      inputRange: [minProgress, maxProgress],\n      outputRange: [0, width],\n      extrapolate: Extrapolate.CLAMP,\n    }\n  );\n\n  useCode(() => {\n    if (isAnimated) {\n      return set(\n        progressValue,\n        timing({\n          from: progressValue,\n          to: progress,\n          duration,\n        })\n      );\n    } else {\n      return set(progressValue, progress);\n    }\n  }, [progress]);\n\n  useCode(() => {\n    if (isIndeterminate) {\n      const loopingIndeterminateValue = loop({\n        autoStart: true,\n        boomerang: false,\n        duration,\n      });\n      return set(indeterminateValue, loopingIndeterminateValue);\n    }\n    const animatedIndeterminateValue = timing({\n      from: indeterminateValue,\n      to: 0,\n    });\n    return set(indeterminateValue, animatedIndeterminateValue);\n  }, [isIndeterminate]);\n\n  // todo: web has a bug where the reanimated Animated.View style is not updating unless this is an animated value.\n  let translateX: Node<number> | number = useValue(0);\n\n  if (isIndeterminate) {\n    translateX = interpolate(indeterminateValue, {\n      inputRange: [0, 1],\n      outputRange: [multiply(-1, animatedWidth), width],\n    });\n  }\n\n  return (\n    <ImageBackground\n      onLayout={(e: LayoutChangeEvent) => {\n        setWidth(e.nativeEvent.layout.width);\n      }}\n      resizeMode={'stretch'}\n      style={[\n        styles.container,\n        {\n          height,\n          borderRadius,\n          backgroundColor: trackColor,\n        },\n        style,\n      ]}\n      // @ts-ignore\n      source={trackImage}\n    >\n      <Animated.Image\n        style={[\n          styles.bar,\n          {\n            width: animatedWidth,\n            transform: [\n              {\n                translateX,\n              },\n            ],\n            backgroundColor: color,\n            borderRadius,\n          },\n        ]}\n        // @ts-ignore\n        source={progressImage}\n      />\n    </ImageBackground>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'transparent',\n    overflow: 'hidden',\n  },\n  bar: {\n    resizeMode: 'stretch',\n    left: 0,\n    position: 'absolute',\n    height: '100%',\n  },\n});\n\nexport default ProgressBar;\n"]}